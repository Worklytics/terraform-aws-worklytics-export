name: Terraform CI - Validate

on:
  [push]

jobs:
  validate:
    name: 'Terraform integration'
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      TERRAFORM_VERSION: 1.3.7
      CI_SA_EMAIL: gh-actions-tf-aws-export@worklytics-corp.iam.gserviceaccount.com
      GCP_IDENTITY_POOL: 'projects/432357880585/locations/global/workloadIdentityPools/github-actions/providers/github'
      EXAMPLE_TENANT_SA_EMAIL: tf-aws-export-tenant@worklytics-ci.iam.gserviceaccount.com
      EXAMPLE_TENANT_SA_ID: 104184075060961394622
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AWS_REGION: 'us-west-2'
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: 'setup Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - id: 'auth-gcp'
        name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.GCP_IDENTITY_POOL }}
          service_account: ${{ env.CI_SA_EMAIL }}

      # TODO : auth AWS CLI using GCP SA for workload identity federation *or* directly
      # configuring a target AWS role to trust this GitHub repo:
      # eg, https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services#adding-the-identity-provider-to-aws
      # AWS role needs to be able to create IAM roles, IAM policies, and S3 buckets at a minimum

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::626567183302:role/gh_action_ci_agent
          role-session-name: github_ci
          aws-region: ${{ env.AWS_REGION }}

      - name: 'Terraform - integration test examples/basic'
        working-directory: examples/basic
        run: |
          export CI_RUN=`date +%Y%m%d'T'%H%M%S`
          terraform init
          terraform apply -var="bucket_name_prefix=\"terraform_aws_worklytics_export_ci_${CI_RUN}\"" -var="worklytics_tenant_id=\"${{ env.EXAMPLE_TENANT_SA_ID }}\"" -auto-approve
          export BUCKET_NAME=$(terraform output worklytics_export_bucket.name)
          export IAM_ROLE=$(terraform output worklytics_tenant_aws_role.arn)
          ../../test/rsync.sh ${{ env.EXAMPLE_TENANT_SA_EMAIL }} $BUCKET_NAME $IAM_ROLE
          terraform destroy -auto-approve

